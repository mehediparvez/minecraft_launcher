name: Build and Release Installers

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: read

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            platform: win
            artifact: "*.exe"
          - os: ubuntu-latest
            platform: linux
            artifact: "*.{AppImage,deb}"
          - os: macos-latest
            platform: mac
            artifact: "*.dmg"

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install Dependencies
      run: npm ci

    - name: Download Platform-Specific Java Runtimes
      shell: bash
      run: |
        echo "Downloading platform-specific Java runtimes..."
        mkdir -p java assets
        
        # Download only the Java runtimes needed for the current platform
        if [ "${{ matrix.platform }}" = "win" ]; then
          echo "Downloading Windows Java runtimes..."
          mkdir -p java/windows-x64
          
          # Java 8 Windows
          echo "Downloading Java 8 for Windows..."
          curl -L "https://github.com/adoptium/temurin8-binaries/releases/download/jdk8u422-b05/OpenJDK8U-jre_x64_windows_hotspot_8u422b05.zip" -o java8-win.zip
          mkdir -p java/windows-x64/java8
          unzip -q java8-win.zip -d java/windows-x64/
          mv java/windows-x64/jdk8u422-b05-jre/* java/windows-x64/java8/
          rm -rf java/windows-x64/jdk8u422-b05-jre java8-win.zip
          
          # Java 21 Windows  
          echo "Downloading Java 21 for Windows..."
          curl -L "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.4%2B7/OpenJDK21U-jre_x64_windows_hotspot_21.0.4_7.zip" -o java21-win.zip
          mkdir -p java/windows-x64/java21
          unzip -q java21-win.zip -d java/windows-x64/
          mv java/windows-x64/jdk-21.0.4+7-jre/* java/windows-x64/java21/
          rm -rf java/windows-x64/jdk-21.0.4+7-jre java21-win.zip
          
        elif [ "${{ matrix.platform }}" = "linux" ]; then
          echo "Downloading Linux Java runtimes..."
          mkdir -p java/linux-x64
          
          # Java 8 Linux
          echo "Downloading Java 8 for Linux..."
          curl -L "https://github.com/adoptium/temurin8-binaries/releases/download/jdk8u422-b05/OpenJDK8U-jre_x64_linux_hotspot_8u422b05.tar.gz" -o java8-linux.tar.gz
          mkdir -p java/linux-x64/java8
          tar -xzf java8-linux.tar.gz -C java/linux-x64/
          mv java/linux-x64/jdk8u422-b05-jre/* java/linux-x64/java8/
          rm -rf java/linux-x64/jdk8u422-b05-jre java8-linux.tar.gz
          
          # Java 21 Linux
          echo "Downloading Java 21 for Linux..."
          curl -L "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.4%2B7/OpenJDK21U-jre_x64_linux_hotspot_21.0.4_7.tar.gz" -o java21-linux.tar.gz
          mkdir -p java/linux-x64/java21
          tar -xzf java21-linux.tar.gz -C java/linux-x64/
          mv java/linux-x64/jdk-21.0.4+7-jre/* java/linux-x64/java21/
          rm -rf java/linux-x64/jdk-21.0.4+7-jre java21-linux.tar.gz
          
        elif [ "${{ matrix.platform }}" = "mac" ]; then
          echo "Downloading macOS Java runtimes..."
          mkdir -p java/mac-x64
          
          # Java 8 macOS
          echo "Downloading Java 8 for macOS..."
          curl -L "https://github.com/adoptium/temurin8-binaries/releases/download/jdk8u422-b05/OpenJDK8U-jre_x64_mac_hotspot_8u422b05.tar.gz" -o java8-mac.tar.gz
          mkdir -p java/mac-x64/java8
          tar -xzf java8-mac.tar.gz -C java/mac-x64/
          mv java/mac-x64/jdk8u422-b05-jre/* java/mac-x64/java8/
          rm -rf java/mac-x64/jdk8u422-b05-jre java8-mac.tar.gz
          
          # Java 21 macOS
          echo "Downloading Java 21 for macOS..."
          curl -L "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.4%2B7/OpenJDK21U-jre_x64_mac_hotspot_21.0.4_7.tar.gz" -o java21-mac.tar.gz
          mkdir -p java/mac-x64/java21
          tar -xzf java21-mac.tar.gz -C java/mac-x64/
          mv java/mac-x64/jdk-21.0.4+7-jre/* java/mac-x64/java21/
          rm -rf java/mac-x64/jdk-21.0.4+7-jre java21-mac.tar.gz
        fi
        
        echo "Platform-specific Java download completed"

    - name: Download Minecraft Assets
      shell: bash
      run: |
        echo "Downloading Minecraft core assets..."
        mkdir -p assets/minecraft/versions/1.21.1
        
        # Download version manifest
        curl -L "https://piston-meta.mojang.com/mc/game/version_manifest_v2.json" -o assets/minecraft/version_manifest.json
        
        # Download Minecraft 1.21.1 version info
        curl -L "https://piston-data.mojang.com/v1/objects/4707d00eb834b446575d89a61a11b5d548d8c001/1.21.1.json" -o assets/minecraft/versions/1.21.1/1.21.1.json
        
        # Download Fabric loader info
        mkdir -p assets/fabric
        curl -L "https://meta.fabricmc.net/v2/versions/loader" -o assets/fabric/loader-versions.json
        curl -L "https://meta.fabricmc.net/v2/versions/installer" -o assets/fabric/installer-versions.json
        
        # Create assets manifest
        mkdir -p assets/manifests
        echo '{"minecraft": "1.21.1", "fabric": "latest", "java8": "1.8.0_422", "java21": "21.0.4"}' > assets/manifests/assets.json
        
        echo "Asset download completed"

    - name: Verify Downloaded Assets
      shell: bash
      run: |
        echo "Verifying downloaded Java runtimes and assets..."
        
        # Verify Java runtimes for current platform
        if [ "${{ matrix.platform }}" = "win" ]; then
          echo "Verifying Windows Java runtimes..."
          if [ -f "java/windows-x64/java8/bin/java.exe" ]; then
            echo "✓ Java 8 Windows runtime verified"
            java/windows-x64/java8/bin/java.exe -version
          else
            echo "✗ Java 8 Windows runtime missing"
            exit 1
          fi
          if [ -f "java/windows-x64/java21/bin/java.exe" ]; then
            echo "✓ Java 21 Windows runtime verified"
            java/windows-x64/java21/bin/java.exe -version
          else
            echo "✗ Java 21 Windows runtime missing" 
            exit 1
          fi
          
        elif [ "${{ matrix.platform }}" = "linux" ]; then
          echo "Verifying Linux Java runtimes..."
          if [ -f "java/linux-x64/java8/bin/java" ]; then
            echo "✓ Java 8 Linux runtime verified"
            java/linux-x64/java8/bin/java -version
          else
            echo "✗ Java 8 Linux runtime missing"
            exit 1
          fi
          if [ -f "java/linux-x64/java21/bin/java" ]; then
            echo "✓ Java 21 Linux runtime verified"
            java/linux-x64/java21/bin/java -version
          else
            echo "✗ Java 21 Linux runtime missing"
            exit 1
          fi
          
        elif [ "${{ matrix.platform }}" = "mac" ]; then
          echo "Verifying macOS Java runtimes..."
          if [ -f "java/mac-x64/java8/Contents/Home/bin/java" ]; then
            echo "✓ Java 8 macOS runtime verified"
            java/mac-x64/java8/Contents/Home/bin/java -version
          else
            echo "✗ Java 8 macOS runtime missing"
            exit 1
          fi
          if [ -f "java/mac-x64/java21/Contents/Home/bin/java" ]; then
            echo "✓ Java 21 macOS runtime verified"
            java/mac-x64/java21/Contents/Home/bin/java -version
          else
            echo "✗ Java 21 macOS runtime missing"
            exit 1
          fi
        fi
        
        # Verify assets
        if [ -f "assets/manifests/assets.json" ]; then
          echo "✓ Minecraft assets verified"
          cat assets/manifests/assets.json
        else
          echo "✗ Minecraft assets missing"
          exit 1
        fi
        
        # Display sizes
        echo "=== Final Asset Sizes ==="
        du -sh java/${{ matrix.platform == 'win' && 'windows-x64' || matrix.platform == 'linux' && 'linux-x64' || 'mac-x64' }}/* || true
        du -sh assets/* || true

    - name: Create Release Directory
      run: |
        mkdir -p ../installers
        mkdir -p ../installers/${{ matrix.platform }}

    - name: Build Windows Installer
      if: matrix.os == 'windows-latest'
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        ELECTRON_BUILDER_CACHE: D:\cache
      run: |
        npm run dist:win -- --publish=never
        echo "Build completed for Windows"
        if (Test-Path "dist") { Get-ChildItem dist } else { echo "dist directory not found" }

    - name: Build Linux Installers
      if: matrix.os == 'ubuntu-latest'
      run: |
        npm run dist:linux -- --publish=never
        echo "Build completed for Linux"
        ls -la dist/

    - name: Build macOS Installer
      if: matrix.os == 'macos-latest'
      run: |
        npm run dist:mac -- --publish=never
        echo "Build completed for macOS"
        ls -la dist/

    - name: Copy Artifacts to Release Directory
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp dist/*.exe ../installers/win/ || echo "No .exe files found"
          cp dist/*.exe.blockmap ../installers/win/ || echo "No blockmap files found"
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          cp dist/*.AppImage ../installers/linux/ || echo "No AppImage files found"
          cp dist/*.deb ../installers/linux/ || echo "No .deb files found"
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          cp dist/*.dmg ../installers/mac/ || echo "No .dmg files found"
          cp dist/*.dmg.blockmap ../installers/mac/ || echo "No blockmap files found"
        fi

    - name: List Built Files
      shell: bash
      run: |
        echo "=== Built Files ==="
        find ../installers -type f -name "*" || echo "No files in installers directory"
        echo "=== Dist Directory ==="
        find dist -type f -name "*" || echo "No files in dist directory"

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: void-client-${{ matrix.platform }}
        path: |
          dist/*.exe
          dist/*.dmg
          dist/*.AppImage
          dist/*.deb
          dist/*.blockmap
          dist/*.yml
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display Downloaded Artifacts
      run: |
        echo "=== Downloaded Artifacts ==="
        find ./artifacts -type f -name "*" || echo "No artifacts downloaded"

    - name: Create Release Directory Structure
      run: |
        mkdir -p release-files
        find ./artifacts -name "*.exe" -exec cp {} release-files/ \;
        find ./artifacts -name "*.dmg" -exec cp {} release-files/ \;
        find ./artifacts -name "*.AppImage" -exec cp {} release-files/ \;
        find ./artifacts -name "*.deb" -exec cp {} release-files/ \;
        find ./artifacts -name "*.yml" -exec cp {} release-files/ \;

    - name: List Release Files
      run: |
        echo "=== Release Files ==="
        ls -la release-files/ || echo "No release files found"

    - name: Set up version
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          # Use the tag version if this is a tag push
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          # Use version with timestamp for main branch pushes
          VERSION="1.0.0-dev.$(date +%Y%m%d%H%M%S)"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: "Void Client v${{ steps.version.outputs.VERSION }}"
        body: |
          ## Void Client Release v${{ steps.version.outputs.VERSION }}
          
          ### 🎮 Minecraft Launcher with Microsoft Authentication
          
          **Features:**
          - Microsoft OAuth2 authentication with captcha security
          - Pre-bundled Java runtimes (Java 8 & 21) for instant setup
          - Complete Minecraft assets pre-bundled (no downloads required)
          - Cross-platform support (Windows, macOS, Linux)
          - Support for multiple Minecraft versions
          - Zero internet dependency after installation
          - Optimized installer size with platform-specific Java runtimes
          
          ### 📦 Available Downloads:
          
          #### Windows
          - **Void Client Setup.exe** - Windows installer with NSIS
          
          #### macOS
          - **Void Client.dmg** - macOS disk image
          
          #### Linux
          - **Void Client.AppImage** - Portable Linux application
          - **void-client_x.x.x_amd64.deb** - Debian/Ubuntu package
          
          ### 🚀 Installation Instructions:
          
          **Windows:** Download and run the .exe installer
          **macOS:** Download .dmg, mount it, and drag to Applications
          **Linux (AppImage):** Download, make executable (`chmod +x`), and run
          **Linux (Debian/Ubuntu):** Install with `sudo dpkg -i void-client_*.deb`
          
          ### 🔧 System Requirements:
          - **Windows:** Windows 10 or later
          - **macOS:** macOS 10.15 (Catalina) or later
          - **Linux:** Ubuntu 18.04+ or equivalent
          
          *Java will be automatically downloaded if not present on your system.*
          
          ---
          
          Built with ❤️ using Electron and electron-builder
          
        files: |
          release-files/*
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        generate_release_notes: true
        make_latest: ${{ startsWith(github.ref, 'refs/tags/v') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify Build Status
      run: |
        if [ "${{ needs.build.result }}" = "success" ] && [ "${{ needs.release.result }}" = "success" ]; then
          echo "✅ Build and release completed successfully!"
          echo "🚀 Installers are now available in GitHub Releases"
        else
          echo "❌ Build or release failed"
          echo "Build status: ${{ needs.build.result }}"
          echo "Release status: ${{ needs.release.result }}"
        fi
