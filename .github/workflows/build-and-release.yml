name: Build and Release Installers

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: read

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            platform: win
            artifact: "*.exe"
          - os: ubuntu-latest
            platform: linux
            artifact: "*.{AppImage,deb}"
          - os: macos-latest
            platform: mac
            artifact: "*.dmg"

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install Dependencies
      run: npm ci

    - name: Verify Existing Java Runtimes
      shell: bash
      run: |
        echo "Verifying existing Java runtimes in repository..."
        echo "Current directory: $(pwd)"
        echo "Platform: ${{ matrix.platform }}"
        
        # Check if Java runtimes already exist in the repository
        if [ "${{ matrix.platform }}" = "win" ]; then
          echo "Checking Windows Java runtimes..."
          if [ -d "java/windows-x64" ]; then
            echo "✓ Windows Java directory found"
            ls -la java/windows-x64/ || echo "Unable to list java/windows-x64/"
          else
            echo "✗ Windows Java directory not found, will need to download"
          fi
          
        elif [ "${{ matrix.platform }}" = "linux" ]; then
          echo "Checking Linux Java runtimes..."
          if [ -d "java/linux-x64" ]; then
            echo "✓ Linux Java directory found"
            ls -la java/linux-x64/ || echo "Unable to list java/linux-x64/"
          else
            echo "✗ Linux Java directory not found, will need to download"
          fi
          
        elif [ "${{ matrix.platform }}" = "mac" ]; then
          echo "Checking macOS Java runtimes..."
          if [ -d "java/mac-x64" ]; then
            echo "✓ macOS Java directory found"
            ls -la java/mac-x64/ || echo "Unable to list java/mac-x64/"
            # Check for macOS app bundle structure
            if [ -d "java/mac-x64/java8/Contents" ]; then
              echo "✓ macOS Java 8 app bundle structure detected"
            elif [ -d "java/mac-x64/java8/bin" ]; then
              echo "✓ macOS Java 8 standard structure detected"
            fi
            if [ -d "java/mac-x64/java21/Contents" ]; then
              echo "✓ macOS Java 21 app bundle structure detected"
            elif [ -d "java/mac-x64/java21/bin" ]; then
              echo "✓ macOS Java 21 standard structure detected"
            fi
          else
            echo "✗ macOS Java directory not found, will need to download"
          fi
        fi
        
        # Also check if we have the general Java runtime directories (for backwards compatibility)
        if [ -d "java/java8" ]; then
          echo "⚠️ Generic Java 8 runtime found (consider removing - platform-specific runtimes are preferred)"
          ls -la java/java8/bin/ || echo "Unable to list java8/bin/"
        fi
        
        if [ -d "java/java21" ]; then
          echo "⚠️ Generic Java 21 runtime found (consider removing - platform-specific runtimes are preferred)"
          ls -la java/java21/bin/ || echo "Unable to list java21/bin/"
        fi
        
        echo "Java runtime verification completed"

    - name: Verify Existing Minecraft Assets
      shell: bash
      run: |
        echo "Verifying existing Minecraft assets in repository..."
        
        # Check if assets already exist
        if [ -d "assets" ]; then
          echo "✓ Assets directory found"
          ls -la assets/
          
          if [ -d "assets/minecraft" ]; then
            echo "✓ Minecraft assets directory found"
            ls -la assets/minecraft/
          fi
          
          if [ -d "assets/fabric" ]; then
            echo "✓ Fabric assets directory found"
            ls -la assets/fabric/
          fi
          
          if [ -d "assets/manifests" ]; then
            echo "✓ Manifests directory found"
            ls -la assets/manifests/
          fi
        else
          echo "Creating assets directory structure..."
          mkdir -p assets/minecraft/versions/1.21.1
          mkdir -p assets/fabric
          mkdir -p assets/manifests
          
          # Download version manifest
          curl -L "https://piston-meta.mojang.com/mc/game/version_manifest_v2.json" -o assets/minecraft/version_manifest.json
          
          # Download Minecraft 1.21.1 version info
          curl -L "https://piston-data.mojang.com/v1/objects/4707d00eb834b446575d89a61a11b5d548d8c001/1.21.1.json" -o assets/minecraft/versions/1.21.1/1.21.1.json
          
          # Download Fabric loader info
          curl -L "https://meta.fabricmc.net/v2/versions/loader" -o assets/fabric/loader-versions.json
          curl -L "https://meta.fabricmc.net/v2/versions/installer" -o assets/fabric/installer-versions.json
          
          # Create assets manifest
          echo '{"minecraft": "1.21.1", "fabric": "latest", "java8": "1.8.0_422", "java21": "21.0.4"}' > assets/manifests/assets.json
        fi
        
        echo "Asset verification completed"

    - name: Debug Java Structure Before Build
      shell: bash
      run: |
        echo "=== Debug: Java Structure Before Build ==="
        echo "Current directory: $(pwd)"
        echo "Platform: ${{ matrix.platform }}"
        
        # Show the overall Java structure
        echo "Overall Java directory structure:"
        ls -la java/ || echo "java/ directory not found"
        
        # Show platform-specific structure
        if [ "${{ matrix.platform }}" = "win" ]; then
          echo "Windows Java structure:"
          if [ -d "java/windows-x64" ]; then
            echo "✓ Windows Java directory found"
            find java/windows-x64 -type f -name "java*" | head -10
            ls -la java/windows-x64/java8/bin/ || echo "⚠️  java8/bin not found"
            ls -la java/windows-x64/java21/bin/ || echo "⚠️  java21/bin not found"
          else
            echo "⚠️  No Windows-specific Java found - may need to download at runtime"
          fi
          
        elif [ "${{ matrix.platform }}" = "linux" ]; then
          echo "Linux Java structure:"
          if [ -d "java/linux-x64" ]; then
            echo "✓ Linux Java directory found"
            find java/linux-x64 -type f -name "java*" | head -10
            ls -la java/linux-x64/java8/bin/ || echo "⚠️  java8/bin not found"
            ls -la java/linux-x64/java21/bin/ || echo "⚠️  java21/bin not found"
          else
            echo "⚠️  No Linux-specific Java found - may need to download at runtime"
          fi
          
        elif [ "${{ matrix.platform }}" = "mac" ]; then
          echo "macOS Java structure:"
          if [ -d "java/mac-x64" ]; then
            echo "✓ macOS Java directory found"
            find java/mac-x64 -type f -name "java*" | head -10
            ls -la java/mac-x64/java8/Contents/Home/bin/ || ls -la java/mac-x64/java8/bin/ || echo "⚠️  java8/bin not found"
            ls -la java/mac-x64/java21/Contents/Home/bin/ || ls -la java/mac-x64/java21/bin/ || echo "⚠️  java21/bin not found"
          else
            echo "⚠️  No macOS-specific Java found - may need to download at runtime"
          fi
        fi
        
        echo "Java structure check completed - build will continue regardless of missing runtimes"

    - name: Verify Downloaded Assets
      shell: bash
      run: |
        echo "Verifying Java runtimes and assets..."
        
        # Verify Java runtimes for current platform
        if [ "${{ matrix.platform }}" = "win" ]; then
          echo "Verifying Windows Java runtimes..."
          
          # Check platform-specific only (no fallback to generic)
          if [ -f "java/windows-x64/java8/bin/java.exe" ]; then
            echo "✓ Java 8 Windows runtime verified (platform-specific)"
            java/windows-x64/java8/bin/java.exe -version
          else
            echo "✗ Java 8 Windows runtime missing"
            exit 1
          fi
          
          if [ -f "java/windows-x64/java21/bin/java.exe" ]; then
            echo "✓ Java 21 Windows runtime verified (platform-specific)"
            java/windows-x64/java21/bin/java.exe -version
          else
            echo "✗ Java 21 Windows runtime missing" 
            exit 1
          fi
          
        elif [ "${{ matrix.platform }}" = "linux" ]; then
          echo "Verifying Linux Java runtimes..."
          
          # Check platform-specific only (no fallback to generic)
          if [ -f "java/linux-x64/java8/bin/java" ]; then
            echo "✓ Java 8 Linux runtime verified (platform-specific)"
            java/linux-x64/java8/bin/java -version
          else
            echo "✗ Java 8 Linux runtime missing"
            exit 1
          fi
          
          if [ -f "java/linux-x64/java21/bin/java" ]; then
            echo "✓ Java 21 Linux runtime verified (platform-specific)"
            java/linux-x64/java21/bin/java -version
          else
            echo "✗ Java 21 Linux runtime missing"
            exit 1
          fi
          
        elif [ "${{ matrix.platform }}" = "mac" ]; then
          echo "Verifying macOS Java runtimes..."
          
          # Check platform-specific only (no fallback to generic)
          if [ -f "java/mac-x64/java8/Contents/Home/bin/java" ]; then
            echo "✓ Java 8 macOS runtime verified (platform-specific app bundle)"
            java/mac-x64/java8/Contents/Home/bin/java -version
          elif [ -f "java/mac-x64/java8/bin/java" ]; then
            echo "✓ Java 8 macOS runtime verified (platform-specific standard)"
            java/mac-x64/java8/bin/java -version
          else
            echo "✗ Java 8 macOS runtime missing"
            echo "Contents of java/mac-x64/java8/:"
            ls -la java/mac-x64/java8/ || echo "Directory not found"
            exit 1
          fi
          
          if [ -f "java/mac-x64/java21/Contents/Home/bin/java" ]; then
            echo "✓ Java 21 macOS runtime verified (platform-specific app bundle)"
            java/mac-x64/java21/Contents/Home/bin/java -version
          elif [ -f "java/mac-x64/java21/bin/java" ]; then
            echo "✓ Java 21 macOS runtime verified (platform-specific standard)"
            java/mac-x64/java21/bin/java -version
          else
            echo "✗ Java 21 macOS runtime missing"
            echo "Contents of java/mac-x64/java21/:"
            ls -la java/mac-x64/java21/ || echo "Directory not found"
            exit 1
          fi
        fi
        
        # Verify assets
        if [ -f "assets/manifests/assets.json" ]; then
          echo "✓ Minecraft assets verified"
          cat assets/manifests/assets.json
        else
          echo "✗ Minecraft assets missing"
          exit 1
        fi
        
        # Display sizes
        echo "=== Final Asset Sizes ==="
        if [ "${{ matrix.platform }}" = "win" ]; then
          du -sh java/windows-x64/* 2>/dev/null || du -sh java/java* 2>/dev/null || echo "No Java runtimes found"
        elif [ "${{ matrix.platform }}" = "linux" ]; then
          du -sh java/linux-x64/* 2>/dev/null || du -sh java/java* 2>/dev/null || echo "No Java runtimes found"
        elif [ "${{ matrix.platform }}" = "mac" ]; then
          du -sh java/mac-x64/* 2>/dev/null || du -sh java/java* 2>/dev/null || echo "No Java runtimes found"
        fi
        du -sh assets/* || true

    - name: Create Release Directory
      run: |
        mkdir -p ../installers
        mkdir -p ../installers/${{ matrix.platform }}

    - name: Build Windows Installer
      if: matrix.os == 'windows-latest'
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        ELECTRON_BUILDER_CACHE: D:\cache
      run: |
        npm run dist:win -- --publish=never
        echo "Build completed for Windows"
        if (Test-Path "dist") { Get-ChildItem dist } else { echo "dist directory not found" }

    - name: Build Linux Installers
      if: matrix.os == 'ubuntu-latest'
      run: |
        npm run dist:linux -- --publish=never
        echo "Build completed for Linux"
        ls -la dist/

    - name: Build macOS Installer
      if: matrix.os == 'macos-latest'
      run: |
        npm run dist:mac -- --publish=never
        echo "Build completed for macOS"
        ls -la dist/

    - name: Debug Final Package Structure
      if: always()
      shell: bash
      run: |
        echo "=== Debug: Final Package Structure ==="
        echo "Current directory contents:"
        ls -la
        echo ""
        echo "Looking for build outputs..."
        
        # Check for common electron-builder output locations
        if [ -d "dist" ]; then
          echo "Contents of dist folder:"
          find dist -type f | head -20
        else
          echo "No dist folder found"
        fi
        
        if [ -d "releases" ]; then
          echo "Contents of releases folder:"
          find releases -type f | head -20
        else
          echo "No releases folder found"
        fi
        
        # Try to find any built packages
        echo ""
        echo "Searching for built packages..."
        find . -name "*.exe" -o -name "*.AppImage" -o -name "*.dmg" -o -name "*.deb" | head -10
        
        # Try to examine the built package to see if Java is included
        if [ "${{ matrix.platform }}" = "win" ]; then
          echo "Looking for Windows executable structure..."
          find . -name "*.exe" | head -5
          # Check if we have win-unpacked directory
          if [ -d "releases/win-unpacked" ]; then
            echo "Windows unpacked directory found:"
            ls -la releases/win-unpacked/ | head -10
            if [ -d "releases/win-unpacked/resources" ]; then
              echo "Windows resources directory:"
              ls -la releases/win-unpacked/resources/
              if [ -d "releases/win-unpacked/resources/java" ]; then
                echo "Java structure in Windows build:"
                find releases/win-unpacked/resources/java -type d | head -10
              fi
            fi
          fi
        elif [ "${{ matrix.platform }}" = "linux" ]; then
          echo "Looking for Linux package structure..."
          find . -name "*.AppImage" | head -5
          find . -name "*.deb" | head -5
          # Check linux unpacked directory
          if [ -d "releases/linux-unpacked" ]; then
            echo "Linux unpacked directory found:"
            ls -la releases/linux-unpacked/ | head -10
            if [ -d "releases/linux-unpacked/resources" ]; then
              echo "Linux resources directory:"
              ls -la releases/linux-unpacked/resources/
              if [ -d "releases/linux-unpacked/resources/java" ]; then
                echo "Java structure in Linux build:"
                find releases/linux-unpacked/resources/java -type d | head -10
              fi
            fi
          fi
        elif [ "${{ matrix.platform }}" = "mac" ]; then
          echo "Looking for macOS package structure..."
          find . -name "*.dmg" | head -5
          # Check mac unpacked directory
          if [ -d "releases/mac" ]; then
            echo "Mac directory found:"
            ls -la releases/mac/ | head -10
          fi
        fi

    - name: Copy Artifacts to Release Directory
      shell: bash
      run: |
        echo "Copying artifacts to release directory..."
        
        # Create target directories
        mkdir -p ../installers/win ../installers/linux ../installers/mac
        
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          echo "Looking for Windows artifacts..."
          # Try multiple possible locations
          find . -name "*.exe" -type f | head -5
          
          # Copy from dist if it exists
          if [ -d "dist" ]; then
            cp dist/*.exe ../installers/win/ 2>/dev/null || echo "No .exe files in dist/"
            cp dist/*.exe.blockmap ../installers/win/ 2>/dev/null || echo "No blockmap files in dist/"
          fi
          
          # Copy from releases if it exists
          if [ -d "releases" ]; then
            find releases -name "*.exe" -exec cp {} ../installers/win/ \; 2>/dev/null || echo "No .exe files in releases/"
            find releases -name "*.exe.blockmap" -exec cp {} ../installers/win/ \; 2>/dev/null || echo "No blockmap files in releases/"
          fi
          
          # Copy from current directory
          cp *.exe ../installers/win/ 2>/dev/null || echo "No .exe files in current directory"
          cp *.exe.blockmap ../installers/win/ 2>/dev/null || echo "No blockmap files in current directory"
          
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          echo "Looking for Linux artifacts..."
          # Try multiple possible locations
          find . -name "*.AppImage" -o -name "*.deb" | head -5
          
          # Copy from dist if it exists
          if [ -d "dist" ]; then
            cp dist/*.AppImage ../installers/linux/ 2>/dev/null || echo "No AppImage files in dist/"
            cp dist/*.deb ../installers/linux/ 2>/dev/null || echo "No .deb files in dist/"
          fi
          
          # Copy from releases if it exists
          if [ -d "releases" ]; then
            find releases -name "*.AppImage" -exec cp {} ../installers/linux/ \; 2>/dev/null || echo "No AppImage files in releases/"
            find releases -name "*.deb" -exec cp {} ../installers/linux/ \; 2>/dev/null || echo "No .deb files in releases/"
          fi
          
          # Copy from current directory
          cp *.AppImage ../installers/linux/ 2>/dev/null || echo "No AppImage files in current directory"
          cp *.deb ../installers/linux/ 2>/dev/null || echo "No .deb files in current directory"
          
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          echo "Looking for macOS artifacts..."
          # Try multiple possible locations
          find . -name "*.dmg" | head -5
          
          # Copy from dist if it exists
          if [ -d "dist" ]; then
            cp dist/*.dmg ../installers/mac/ 2>/dev/null || echo "No .dmg files in dist/"
            cp dist/*.dmg.blockmap ../installers/mac/ 2>/dev/null || echo "No blockmap files in dist/"
          fi
          
          # Copy from releases if it exists
          if [ -d "releases" ]; then
            find releases -name "*.dmg" -exec cp {} ../installers/mac/ \; 2>/dev/null || echo "No .dmg files in releases/"
            find releases -name "*.dmg.blockmap" -exec cp {} ../installers/mac/ \; 2>/dev/null || echo "No blockmap files in releases/"
          fi
          
          # Copy from current directory
          cp *.dmg ../installers/mac/ 2>/dev/null || echo "No .dmg files in current directory"
          cp *.dmg.blockmap ../installers/mac/ 2>/dev/null || echo "No blockmap files in current directory"
        fi
        
        echo "Artifact copy complete. Checking what was copied:"
        ls -la ../installers/win/ 2>/dev/null || echo "No win directory"
        ls -la ../installers/linux/ 2>/dev/null || echo "No linux directory"
        ls -la ../installers/mac/ 2>/dev/null || echo "No mac directory"

    - name: List Built Files
      shell: bash
      run: |
        echo "=== Built Files ==="
        find ../installers -type f -name "*" || echo "No files in installers directory"
        echo "=== Dist Directory ==="
        find dist -type f -name "*" || echo "No files in dist directory"

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: void-client-${{ matrix.platform }}
        path: |
          dist/*.exe
          dist/*.dmg
          dist/*.AppImage
          dist/*.deb
          dist/*.blockmap
          dist/*.yml
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display Downloaded Artifacts
      run: |
        echo "=== Downloaded Artifacts ==="
        find ./artifacts -type f -name "*" || echo "No artifacts downloaded"

    - name: Create Release Directory Structure
      run: |
        mkdir -p release-files
        find ./artifacts -name "*.exe" -exec cp {} release-files/ \;
        find ./artifacts -name "*.dmg" -exec cp {} release-files/ \;
        find ./artifacts -name "*.AppImage" -exec cp {} release-files/ \;
        find ./artifacts -name "*.deb" -exec cp {} release-files/ \;
        find ./artifacts -name "*.yml" -exec cp {} release-files/ \;

    - name: List Release Files
      run: |
        echo "=== Release Files ==="
        ls -la release-files/ || echo "No release files found"

    - name: Set up version
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          # Use the tag version if this is a tag push
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          # Use version with timestamp for main branch pushes
          VERSION="1.0.0-dev.$(date +%Y%m%d%H%M%S)"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: "Void Client v${{ steps.version.outputs.VERSION }}"
        body: |
          ## Void Client Release v${{ steps.version.outputs.VERSION }}
          
          ### 🎮 Minecraft Launcher with Microsoft Authentication
          
          **Features:**
          - Microsoft OAuth2 authentication with captcha security
          - Pre-bundled Java runtimes (Java 8 & 21) for instant setup
          - Complete Minecraft assets pre-bundled (no downloads required)
          - Cross-platform support (Windows, macOS, Linux)
          - Support for multiple Minecraft versions
          - Zero internet dependency after installation
          - Optimized installer size with platform-specific Java runtimes
          
          ### 📦 Available Downloads:
          
          #### Windows
          - **Void Client Setup.exe** - Windows installer with NSIS
          
          #### macOS
          - **Void Client.dmg** - macOS disk image
          
          #### Linux
          - **Void Client.AppImage** - Portable Linux application
          - **void-client_x.x.x_amd64.deb** - Debian/Ubuntu package
          
          ### 🚀 Installation Instructions:
          
          **Windows:** Download and run the .exe installer
          **macOS:** Download .dmg, mount it, and drag to Applications
          **Linux (AppImage):** Download, make executable (`chmod +x`), and run
          **Linux (Debian/Ubuntu):** Install with `sudo dpkg -i void-client_*.deb`
          
          ### 🔧 System Requirements:
          - **Windows:** Windows 10 or later
          - **macOS:** macOS 10.15 (Catalina) or later
          - **Linux:** Ubuntu 18.04+ or equivalent
          
          *Java will be automatically downloaded if not present on your system.*
          
          ---
          
          Built with ❤️ using Electron and electron-builder
          
        files: |
          release-files/*
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        generate_release_notes: true
        make_latest: ${{ startsWith(github.ref, 'refs/tags/v') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify Build Status
      run: |
        if [ "${{ needs.build.result }}" = "success" ] && [ "${{ needs.release.result }}" = "success" ]; then
          echo "✅ Build and release completed successfully!"
          echo "🚀 Installers are now available in GitHub Releases"
        else
          echo "❌ Build or release failed"
          echo "Build status: ${{ needs.build.result }}"
          echo "Release status: ${{ needs.release.result }}"
        fi
